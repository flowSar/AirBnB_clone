#!/usr/bin/python3
"""test_base_models is dedicate to test base_model module
    and his has one unittst class and many function for testing
"""
import unittest
import json
from models.place import Place
from datetime import datetime as dtime


class TestBaseModel(unittest.TestCase):
    """
        this is the class that was didicated for testing
        all BaseMode methods
    """
    def test_init(self):
        """test if the unite test qork is inteded for example
        check if updated_at != created_at
        """
        place = Place()
        place.city_id = ""
        place.user_id = ""
        place.name = ""
        place.description = ""
        place.number_rooms = 0
        place.number_bathrooms = 0
        place.max_guest = 0
        place.price_by_night = 0
        place.latitude = 0.0
        place.longitude = 0.0
        place.amenity_ids = []
        place.save()
        self.assertNotEqual(place.created_at, place.updated_at)
        self.assertEqual(place.city_id, '')
        self.assertEqual(place.user_id, '')
        self.assertEqual(place.name, '')
        self.assertEqual(place.description, '')
        self.assertEqual(place.number_rooms, 0)
        self.assertEqual(place.number_bathrooms, 0)
        self.assertEqual(place.max_guest, 0)
        self.assertEqual(place.price_by_night, 0)
        self.assertEqual(place.latitude, 0.0)
        self.assertEqual(place.longitude, 0.0)
        self.assertEqual(place.amenity_ids, [])

    def test_save(self):
        """this method for testing if the aboject that was create
            is stored in json file
        """
        place = Place()
        place.save()
        found = False
        with open("file.json", "r") as f:
            jdata = json.load(f)
        for key in jdata.keys():
            obj_id = key.split(".")[1]
            if obj_id == place.id:
                found = True
        self.assertTrue(found)

    def test_to_dict(self):
        """this functio test if the data that was generated by
        to_dict() method is the same data that was stored in json file"""
        place = Place()
        place.city_id = "43465-56745"
        place.user_id = "3546123"
        place.name = "khalid"
        place.description = "place is beautiful"
        place.number_rooms = 7
        place.number_bathrooms = 2
        place.max_guest = 2
        place.price_by_night = 20
        place.latitude = 356.7
        place.longitude = 5.7
        place.amenity_ids = [124, 5678, 8975]
        place.save()
        found = {}
        with open("file.json", "r") as f:
            jdata = json.load(f)
        for key in jdata.keys():
            obj_id = key.split(".")[1]
            if obj_id == place.id:
                found = jdata[key]
        self.assertEqual(found, place.to_dict())
        self.assertEqual(place.city_id, found['city_id'])
        self.assertEqual(place.user_id, found['user_id'])
        self.assertEqual(place.name, found['name'])
        self.assertEqual(place.description, found['description'])
        self.assertEqual(place.number_rooms, found['number_rooms'])
        self.assertEqual(place.number_bathrooms, found['number_bathrooms'])
        self.assertEqual(place.max_guest, found['max_guest'])
        self.assertEqual(place.price_by_night, found['price_by_night'])
        self.assertEqual(place.latitude, found['latitude'])
        self.assertEqual(place.longitude, found['longitude'])
        self.assertEqual(place.amenity_ids, found['amenity_ids'])


if __name__ == '__main__':
    unittest.main()
